What is React.js?
*********************
React is a JavaScript library created by Facebook to create user interface(UI).
React is Used to make a single page Application(SPA).
React allows us to create reusable UI components.

What is Single Page application?
*********************************
Single page application also known as SPA in short, Is an application that loads only a single document and then updates the body content of the single document via JavaScript APIs.

Benefits of SPA.
*****************
it allows users to use websites without loading whole new pages, which results in performance gains and a more dynamic experience.

What is Component in React?
*******************************
Components are independent and reusable bits of code. They serve the same purpose as Javascript function, but work in isolation and return HTML.
Components come in two types, Class components and Function Components.

Application
    * Header
    * Body (Content)
    * Sidebar

React installation steps
*************************
    1. Install Node.js and npm
    2. Install text Editer like VS Code
    3. Install React using "npx create-react-app App-Name" command

What is JSX?
***************
JSX stands for JavaScript XML or Extension.
With the help of JSX we can write and add HTML in React.
JSX converts HTML tags into React Element.
it's not compulsory to use JSX.

    Rules of writting JSX.
    -----------------------
    > HTML code must wrap into one top level element.
    > Elements must be closed.
    > Attribute class = className & for = HTMLfor
    > No if else condition inside jsx but ternary operator is okey.
    > JavaScript expression in JSX must be wrapped in {}.

What is Props?
***************
Props stands for Properties.
Props are used to transfer data from one Component to another.
Props are read only.
Props are just like a function in JavaScript.

What is State in React?
*************************
The state is a built-in React object that is used to contain data or information about the components.
A state can be modified based on user action or network changes.
Everytime when the state of an object changes, React re-render the component to the browser.

Rules of using Hooks?
***********************
1. Must be written inside function component.
2. must be import in component.
3. Must be call at top level of component
4. cannot be conditional.

useState hook 
***************
const [count, SetCount] = useState(0);
const [data, SetData] = useState("king");

useEffect hook
***************
useEffect( ()=>{
    console.log("component mounted");
});

useEffect( ()=>{
    console.log("component mounted");
},[]);

useEffect( ()=>{
    console.log("component mounted");
},[count]);

useEffect( ()=>{
    console.log("component mounted");
},[count,data]);

useRef hook
************
useRef hook is used for dom manipulation

const refElement = useRef("");
refElement.current.focus();
refElement.current.style.color="blue"
refElement.current.value="Random text"

example:-
    import React,{useState,useRef} from "react";

    function App(){
        const refElement = useRef("");
        const [name, setName] = useState("Prabhat");
        console.log(refElement);

        function Reset(){
            setName("");
            refElement.current.focus();
        }

        function handleInput(){
            refElement.current.style.color="blue"
            refElement.current.value="Random text"
        }

        return (
            <>
            <h1>Learning useRef</h1>
            <input ref={refElement} type="text" value={name} onChange={(e)=>setName(e.target.value)}></input>
            <button onClick={Reset}>Reset</button>
            <button onClick={handleInput}>handle Input</button>
            </>
        )
    }


Prop Drilling:-
****************
Parent ➡ ChildA ➡ ChildB ➡ ChildC ➡ ChildD;


What is context API?
*********************
Context API is a built-in API introduced in React 16.3. It makes it possible to pass data from parent to children nested deep down the component tree directly,instead of passing it down through a chain of props.

create, provider, consumer

const data = createContext();
const name = "prabhat";
<data.Provider value={name}>
    <Child/>
</data.Provider>
<data.Consumer>
    {
        (name)=>{
            return(
                <h1>My name is {name}</h1>
            )
        }
    }
</data.Consumer>

Example:-
parent component
------------------
import react,{createContext} from "react";
import Child from "./Child";

const data = createContext();
const data2 = createContext();

function ParentComponent(){
    const name = "Prabhat";
    const gender = "Male";

    return(
        <>
        <data.Provider value={name}>
            <data2.Provider value={gender}>
                <Child/>
            </data2.Provider>
        </data.Provider>
        </>
    )
}

export default ParentComponent;
export {data,data2};


child component
-----------------
import React from "react";
import {data,data2} from "./ParentComponent"

function Child(){
    return(
        <data.Consumer>{
            (name)=>{
                return(
                    <data2.Consumer>
                    {
                        (gender)=>{
                            return(
                                <h1>My name is {name} and my gender is {gender}</h1>
                            )
                        }
                    }
                    </data2.Consumer>
                )
            }
        }
        </data.Consumer>
    )
}

export default Child;


useContext hook
****************
const context = useContext(data);

Example :-
parent component
------------------
import react,{createContext} from "react";
import Child from "./Child";

const data = createContext();
const data2 = createContext();

function ParentComponent(){
    const name = "Prabhat";
    const gender = "Male";

    return(
        <>
        <data.Provider value={name}>
            <data2.Provider value={gender}>
                <Child/>
            </data2.Provider>
        </data.Provider>
        </>
    )
}

export default ParentComponent;
export {data,data2};


child component
-----------------
import React from "react";
import {data,data2} from "./ParentComponent"

function Child(){
    const name = useContext(data);
    const gender = useContext(data2);

    return(
        <>
            <h1>My name is {name} and gender is {gender}</h1>
        </>
    )
}

export default Child;


useMemo hook
*************
conat variableName = useMemo(()={
    console.log("***************");
    return statement;
},[state])

Example:-
import React,{useState,useMemo} from "react";

function App(){
    const [add, setAdd] = useState(0);
    conat [minus, setMinus] = useState(100);

    const multiply = useMemo(()=>{
        console.log("***************");
        return add*10;
    },[add])

    return(
        <div>
            {multiply} <br/>
            <button onClick={()=>setAdd(add + 1)}>Addition</button>
            <span>{add}</span> <br/>

            <button onClick={()=>setMinus(minus - 1)}>Substraction</button>
            <span>{minus}</span> <br/>
        </div>
    )
}

useCallback hook
*****************
useCallback(fn, deps) is equivalent to useMemo(() => fn, deps).

Lifting State Up
******************
Lifting State Up or data transfer from Child to parent 

Example:-
ParentComponent
---------------
import Child from "./Child";

function ParentComponent() {
    function getData(data){
        console.log(data);
    }
    return(
        <>
            <Child getData={getData}/>
        </>
    );
}


Child component
----------------
import React,{useState} from "react";

function child(props){
    const [name, setName] = useState();
    function handleSubmit(e){
        e.preventDefault();
        props.getData(name);
    }
    return(
        <form onSubmit={handleSubmit}>
            <input type='text' value={name} onChange={(e)=> setName(e.target.value)}></input>
            <button>Submit</button>
        </form>
    )
}

export default Child;

Registration Form in React
****************************
import React,{useState,useEffect} from "react";

function Form(){
    const data={name:"",email:"",password:""};
    const [inputData, setInputData] = useState(data);
    const [flag, setFlag] = useState(false);

    useEffect(()=>{
        console.log("Registered");
    },[flag])

    function handleData(e){
        setInputData({...inputData, [e.target.name]:e.target.value})
        console.log(inputData)
    }
    function handleSubmit(e){
        e.preventDefault();
        if(!inputData.name || !inputData.email || !inputData.password){
            alert("All Fields are Mendatory")
        }else{
            setFlag(true)
        }
    }

    return(
        <>
        <pre>{(flag)?<h2>Hello {inputData.name}, You've Registered Successfully</h2>:""}</pre>
        <form onSubmit={handleSubmit}>
            <h1>Registration Form</h1>
            <input type='text' name='name' value={inputData.name} onChange={handleData} placeholder="Enter Your Name"></input> <br/>

            <input type='text' name='email' value={inputData.email} onChange={handleData} placeholder="Enter Your Email"></input> <br/>

            <input type='password' name='password' value={inputData.password} onChange={handleData} placeholder="Enter Your Password"></input> <br/>

            <button type='Submit'>Register</button>
        </form>
        </>
    )
}


List rendering using map()
***************************
Array.prototype.map()
    The map() methos creates a new array populated with the result of calling a provided function on every element in the calling array.

    Example:-
    const array = [1,2,3,4,5,6,7,8];
    const double = array.map(x => x*2);
    console.log(double);
    //expected output: [2,4,6,8,10,12,14,16]

map() with key
***************
const array = [1,2,3,4,5,6,7,8];
const double = array.map((x,index)=> <h1 key={index}>{x*2}</h1>)
console.log(double);
    //expected output: [2,4,6,8,10,12,14,16]


useState hook with object
**************************
import react,{useState} from "react";

function App(){
    const [values, setValues]= useState({firstName:"King", lastName: "Kohli"});
    function updateName(){
        setValues({...values, firstName: "Virat"})
    }

    return(
        <>
        <h1>First Name is {values.firstName} and Last Name is {values.lastName}</h1>
        <button onClick={updateName}>Update</button>
        </>
    )
}

export default App;


useState hooks with an Array
*****************************
import react,{useState} from "react";

function App(){
    const [items, setItems] = useState([]);
    console.log(items);

    function addItems(){
        setItems([...items, {
            id: items.length,
            value: Math.random();
        }])
    }

    return(
        <>
        <ol>
            {
                items.map(items => (
                    <li key={items.id}>{items.value}</li>
                ))
            }
        </ol>
        <button onClick={addItems}>Add Items</button>
        </>
    )
}


ToDo List in React
*******************
import react,{useState} from "react";

function TodoList() {
    const [activity, setActivity] = useState("");
    const [listData, setListData] = useState([]);

    function addActivity(){
        setListData((listData)=>{
            const updatedList = [...listData,activity]
            console.log(updatedList)
            setActivity("");
            return updatedList;
        })
    }

    function removeActivity(i){
        const updatedListData = listData.filter((element, id)=>{
            return i!=id;
        })
        setListData(updatedListData);
    }
    function removeAll(){
        setListData([]);
    }

    return(
        <>
        <h1>TODO LIST</h1>
        <input type='text' placeholder='Add Activity' value={activity} onChange={(e)=>setActivity(e.target.value)}></input>
        <button onClick={addActivity}>Add</button>
        <p> Here is Your List :{")"}</p>
        {
            listData!=[] && listData.map((data, i)=>{
                return(
                    <>
                    <p key={i}>
                        {data}
                        <button onClick={removeActivity(i)}>remove(-)</button>
                    </p>
                    </>
                )
            })
        }
        {listData.length>=1 && <button onClick={removeAll}>Remove All</button>}
        </>
    )
}

useReducer hook
******************
What is useReducer?
> useReducer is a react hook used for state management.
> Alternative of useState() hook.
> Preferable for complete state management logic.

Syntax
    const [state, dispatch] = useReducer(reducer, initialstate)
                                            ⬇
                                        reducer(currentState, action)

What is reducer?
> Reducer is a function accepts two paramiter
    newState=reducer(currentState, action)

Example:-
------------
import React,{useReducer} from 'react';

const initialstate=0;
const reducer = (state, action)=>{
    switch(action){
        case "Increment":
            return state+1
        case "Decrement":
            return state-1
        default :
            return state
    }
}

function Counter(){
    const [count, dispatch] = useReducer(reducer, initialstate)

    return(
        <>
            <button onClick={()=>dispatch("Increment")}>+</button>
            <div>Count = {count}</div>
            <button onClick={()=>dispatch("Decrement")}>-</button>
        </>
    )
}

export default Counter;



Custom Hooks in React
***********************
> A custom Hooks is a JavaScript function whose name starts with "use".
> We can use Other hooks in custom hooks as well.

Why to use Custom Hook?
    to remove the duplicated logic in components and we can extract that logic to custom hook.

Example :-
creating a Counter Hook useCounter
import {useState} from 'react';

function useCounter(initialValue = 0){
    const [count, SetCount] = useState(initialValue);

    function Increment(){
        SetCount(count+1)
    }

    function Decrement(){
        SetCount(count-1)
    }

    return [count, Increment, Decrement]
}

export default useCounter;


using useCounter custom hook in App component ⬇
---
import React from 'react';
import useCounter from "./useCounter";

function App(){
    const [count, Increment, Decrement] = useCounter(10);

    return (
        <>
            <button onClick={Increment}>Increment</button>
            <div>Count = {count}</div>
            <button onClick={Decrement}>Decrement</button>        
        </>
    )
}

export default App;