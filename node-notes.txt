Server Side Programming using Js 
********************************
1. dotenv module/package
2. fs module/package (core module of node)
3. http module (core module of node)
4. mongoose module (connection mongo DB)
5. express module (Framework package for Node)
6. express router module (for routing)
7. jwt module (json web token Api-Secure)
8. multer module (image uploading)
9. body-parser package (to handle Post data send from form)

10. Template Package of Node Js.
    Note :: Node is Purely
    server side, programming Js Runtime Environment.
    PL => JS.
   Templating Means :-
   laravel => Blade Template Engine
   Django => gingerTechnique {% static %}
   React => JSX Template
   
  but in php we can directly implement code 
  in html script.
  Node itself is not capable of writing the,
  html script and there is not way you can interact
  with dom.
  hence we template Engine for Node
  Node will take Js file with html code and parse 
  them and re-render the code, in browser.
	
   View : React-front-End/AngularJs/Angular/VueJs/core html or Template Engine

   Most Popular Template Engines:-
  *********************************
  1. pug
  2. HandleBars
  3. Mustache
  4. Ejs (Embedded Javascript)
  ...
  ...
  etc

  Q1: IQ => Difference EJS and Jsx 
     Both are using html + Js but Jsx in used in front End
     and Ejs is used in Backend
     Jsx => React/Angular/Vuejs
     Ejs => Node/Express/Fastify
      Framework of Node
      ******************
       1. Express 2. Fastify 3. Hapi
       4. Koa 


   Model (data or schema or Api or Query)
   ******
   let data = {
	name : "Awnish",
        class : "MBA",
        isBack : "yes",
        noOfBack: 4
   }

   for example:-
    <h1> name = {data.name} </h1> =====> input => js code will replace => replace Output return to    Browser
   controller :-
   *************
   All the Bussiness Logic will be written in,
   Node Js in Controller.
   controller => Js file where most important
   code of Backend is Written
   
   controller main role is get the data from model     and pass to the view or vice versa.

hence Node Follows MVC Archiecture ?
IQ2 : what is MVC?
      model : for database Operations.
      view  : all the front end Part or UI 
      Template (pug,ejs...)
      controller : data transfer B/w M to V
	  
	  
Date : 10-02-2023
*******************
    - Brief Introduction of GO4 (gang of four)
	- As your experience increase, you would see multipe way, of writing the code.
	
	For Example:-
	$() => Jquery
	
	1. $(document).ready()
	2. (function(){
		$('#btn').click();
	});
	3. jQuery(document).ready()
	
	for Example:-
	
	$(document).ready(function(){
	
	})
	$(document).ready(doSomething)
	
	function doSomething(){
	
	}
	
	$(document).ready(()=>{
	
	
	});
	
	$(document).ready((event)=>{
	
	
	});
	
	$(document).ready(event=>event.preventDefault());
	
	Programming Paradigm:-
	**********************
	we know as Programming paradigm(no of way you can write the code in PL,)
	1. procedural Programming => limitation 
	2. Object Oriented Programming => limitation.
	
	These limitation of Object Oriented Programming system
	was Redesigned by 4 cs developer (Team,gang)
	
	1990's  most of IT firms were using, OOps for Software Developement and Research.
	When GO4 Research Books(thesis), OOps is not the best way of Making S/W.
	GO4 they re-design the oops into a set of 23 codes 
	"Re-usable component of Object Oriented Programming system".
	There now called Design Patterns.
	
	
	These are divided into categories
	1. Structural DP.
	2. Creational DP.
	3. Behavioural DP.
	
	These Design Pattern are there in Every Programming Langauge.
	
	For Example:-
    **************
	Android => ListView => ArrayAdapter, BaseAdapter,CustomAdapter ...
	
	adapter is one of Design Pattern
	
    ********************************************	
	https://github.com/EvilAnshu/design-patterns-JS/blob/master/docs.md#singletonjs
	
	
	Nature of Node Js:-
	************************
	1. Asynchronous.
	2. Single Threaded.
	3. Server Side Runtime Environment.
	4. V8-Engine Architecture
	5. Event Driven 
	6. Non Blocking
	7. Background I/O Mechanism
	8. highly effiecent.
	9. mvc Archiecture or Mvc Design pattern.
	
	
	HW :- Date/10/02/2023
	*********************
	1. watch vedios on Yotube for each topic.
	2. make a Notes on it with Diagrams:-
	3. sunday :- React Js Theory + Practicle.

    	For More documentation please visit :-
	*****************************************
	--> https://nodejs.org/docs/latest-v17.x/api/
	
	How to Run node Environment
	****************************
	1. console mode (output will be in cmd)
	   Node In console Mode :-  Returns Json Output.
	   
	   console of node supports :-
	   1. two type of command line : node chevron or node prompt, node REPL or Interactive Mode. or interactive shell.
	   
	   
	   Interactive mode is basically, interpreted in nature.
	   and allows only one line at a time.
	   REPL itself is interpreter also it is module in node.
	   it gives output for each input statement provided.
	   
	   How to start interactive mode :-
	   1. open cmd 
	   2. type node <- Hit Enter
	   3. > : this single greater than this is called, as Node prompt, or Node Chevron
	      standard Name is : Node Repl.
		  
		  what is Repl?
		  Node : >
		  cmd : :/>
		  gitbash : $
		  mathlab : >>
		  python : >>>
		  laragon : lambda
		  xampp : #
		  mysql : [dbname]>
		  
		  common : these all running in cmd 
		  difference : symbol
		  Explaination : different symbol means different command.
		  Example :-
		  
		  >>> git push
		  Error 
		  
		  $ print('Python is good Langauge');
		  Error 
		  
		  > echo $x;
		  Error
		  
		  :/> console.log('hello world in node Js');
		  Error.
		  
		  C:\>console.log('hello from node')
			'console.log' is not recognized as an internal or external command,
			operable program or batch file.
			
		  cmd:/> ver 
			Microsoft Windows [Version 10.0.19045.2486] valid Command.
			
		  
		  These all Above Repl shows error because of invalid command is written in front
		  of them.
		  each symbol of Repl represent a unique interprator related to, PL`s (programming Langauge)
		  
		  REPL : READ EVALUATE PRINT LOOP.
		  
		  Read : Read input from the user
		  Evaluate : Solve the expression
		  print : generate output
		  Loop : we can use looping statement like, for loop while loop.
		  
		  working with Node Interactive Mode :-
		  ***************************************
		  
		  start Node 
		  cmd:/> node <-hit Enter
		  > //node command 
		  
		  Keywords in node Repl
		  1. syntax Js 
		  2. repl keyword :- .exit(), .help() ...
		  
		  .break    Sometimes you get stuck, this gets you out
		  .clear    Alias for .break
		  .editor   Enter editor mode
          .exit     Exit the REPL
          .help     Print this help message
          .load     Load JS from a file into the REPL session
          .save     Save all evaluated commands in this REPL session to a file

                 C:\>set /p name=Enter Your Name:
            Enter Your Name:Prabhat Patel

            C:\>echo %name%
            Prabhat Patel

            C:\>node
            Welcome to Node.js v18.13.0.
            Type ".help" for more information.
            > for(let i=0;i<5;i++){console.log(`output is ${i}`)}
            output is 0
            output is 1
            output is 2
            output is 3
            output is 4
            undefined
            >

		  
		  Process Object in Node JS :-
		  ********************************
		  IQ - can you prove that node js is a runtime Environment.
		  Node Js contains :- process global object which holds all the environmets,
		  path,os related information.
		  
		  process.env : it is used to access Environment variable.
		  
		  
	   2. Script mode or Batch Mode/shell
	   here we want to execute bulk of lines of code we go for, script mode.
	   what is script here :-
	   1.likewise every Js file is a module itself.
	   2. similarly every Js file with some line of code within is a script.
	   
	   p1.js 
	   -------
	   ....line-1
	   ....line-2
	   ....line-3
	   ....line-4
	   ....line-5
	   ....line-6
	   ....line-n
	   
	   js script => p1.js 
	   execute 
	   terminal cmd:/> node p1.js 
	   node <filename.js>
	   
	   Note :: Terminal (shell/cmd).
	   
	   This script can be also, executed using npm
	   what is npm ? it is node package manager, and used to add dependencies on the project.
	   
	   using npm script execution:-
	   ****************************
	    p1.js 
	   *******
	   
		1. npm init -y
		2. package.json => Edit => main => p1.js <----Entry Script.
		3. scripts => key => {"start":"node p1.js"}
		4. npm run start.
		
		
	   2. Server Mode (output will be rendered in, Browser).
	      in server mode Browser will work as client.
	   	   
	   Note :: console cannot accept, Request and Response.
	   it does not support http protocal.
	   
	   we know, in client and server model we have some algorithm like hande-shake alogrithm,
	   sliding window protocal, etc such type of alogrithm are not supported
	   by console, hence, we need a client which can support request/response 
	   cycle, such client are, like postman, thunderbold, Browser.
	   
	   
	   => node here will work as, Server.
	      node console will not as of client rather than a server.
		  
		  (postman/thunderbold)[client]
		  Browser ---------> Request ---------------> Node Server (server.js or index.js).
		                                                   ^
		                                                   |
														   |
														   |
														---------
														 Response
														----------
														   |
														   |
												1. to the client.
		                                        2. to the console.
	   
	   
	   
	   
	   Note :: console can be used as server and client both
	   console => client => curl 
	   curl stands for content url.
	   
	   How to create node-server:-
	   *******************************
	   
	   1. -Request Object : handle client.
	   2. -Response Object : handle server.
	   
	   steps to create node server:-
	   ****************************
	   server.js : most important which intialises the server.
	   or which set-ups server.
	   
	   No Application is possible without node-server file:-
	   
	   step1 :-
	   ******
	   create const reference for http module:-
	   const http = require('http');	   
	   step2 :-
	   ******
	   using http object createServer Interface.
	   
	   http.createServer((request,response)=>{
	   
	   
	   });
	   
	   step3:- 
	   *******
	   Now set a port where you want your server launch.
	   Never use following 
	   port => 80 => Apache
	   port => 3000 => react
	   port => 5000 => Django
	   Note ::Never use reserved Port
	   
	   8080 => by-default port.
	   7080
	   7000
	   const PORT=8080;
	   
	   http.listen(PORT,function()=>{
	   
	     console.log('Server Started Sucessfully at port'+PORT)
	   
	   });
	   
	   
	   How to send Json Response to the Browser:-
	   *************************************
	   1. You should have a Array of Json Object which can be 
	   send as response to server.
	   2. set the content-type : application/json
	   3. use JSON.stringify() to encode the Json to String : Serialisation.
	   
	   Note :: Why we are using JSON.stringify,
	   becuase of two reason
	   1. response.write() only takes string Input
	   2. Browser only Understand text or tag.
	   
	   
	   How to send html Response to the Browser:-
	   ***************************************
	   1. response.writeHead(200,{"Content-Type":"text/html"});
	   2. response.write("<h1> This is Heading </h1>");
	   
	   Note here is problem :-
	   You cannot write lot of html code.
	   You can use template string and Write the web-page code 
	   and you can then pass that variable as response to write();
	   
	   Problem:-
	   ********
	   Right now we are writing all data level code and design level code 
	   in server.js 
	   
	   data level  => model
	   design level => view
	   hence we must organise the data in mvc design pattern to follow modular approach.
	   
	   Project structure of mvc Node Application:-
	   ******************************************
	   controller
	   model
	   view
	   index.js or server.js 
	   .env => configuration or Environment varaible.
	   .gitIgnore
	   package.json 
	   package-lock.json
	   
	   This project structure is common
	   for all, projects.
	   
	   controller => folder mkdir
	   model => folder mkdir 
	   view => folder mkdir
	   index.js => touch command
	   package.json => npm init -y
	   package-lock.json => npm install
	   
	   Note if package.json 
	   *********************
	   will install node_modules folder
	   if any dependencies are added in package.json 
	   
	   Note :: please make use of git bash 
	   terminal.
	   
	   Making a Node Module:-
	   *************************
	   
	   1. module.exports = {}
	   2. exports.var = var;
	   
	   Note :: module.exports/exports both referes to global empty Object 
	   this => {} => global empty Object.
	   
	   module = {exports : {x:10}}
	   module.exports = {x:10}
	   module.exports.x=10
	   
	   var x=10;
	   module = {exports:x}
	   module.exports = x;
	   
	    In flexible there is no difference B/w module.exports and exports.
		but in strict mode we cannot use exports directly.
		it is because module is a mendatory, Object in strict mode.
		
		but since module refer to this Object.
		you can pass varaible in following
		1. module.exports = x;
		2. this.exports = x;
		3. exports.x=x;
		   |
		   this => module.
		   
		   
		   exports === module.exports : strict mode : off 
		   exports != module.exports : strict mode : on


Implementation modularity in mvc:-
************************************
We know that,
m => model
v => view
c => controller

It is always better approach, to keep the different Js file with in different associated folder such that modularity of the project can be maintained.

StudentModel.js Model suffix => pascal case 
StudentController.js Controller suffix => pascal case.
students.js =>view lovwecase suffix.
            Note :: Template Engine 
                pug : students.pug
                EJS : student.ejs
                jade : student.jd 
                handlebars : student.hbs
                mustaches : mts 

                These template files on views are called as partials.
                Views 
                    |partials
                        ....template Engines.
                    |layouts
                        index.html,index.js    

StudentModel.js
*****************
data of the Student model => 

Api call => student data.

var studentModel = {
    students:[
        {
            "id":1001,
            "name": "Prabhat",
            "class": "Btech",
            "stream": "CS"
        },
        {
            "id":1002,
            "name": "virat",
            "class": "Btech",
            "stream": "IT"
        },
        {
            "id":1003,
            "name": "Salmon",
            "class": "BA",
            "stream": "Hindi"
        },
        {
            "id":1004,
            "name": "Akash",
            "class": "MBA",
            "stream": "IT"
        },
    ]
}

module.exports = studentModel

StudentController.js
**********************
const studentModel = require("./studentModel");
1. data from model to controller 

    Response Object it must contain
    1. code : 201
    2. data : it can be array or object  [], {}
    3. status : true or false
    4. message or comment : "Login Successfull","Oops something, went wrong".
    5. error : by-default it will be false, if any error error message will be raised

        let response = {};

        try and catch.
        let promise = fetch(url).then().then.catch((error)=>{
            let responseError = error
        });

        JsonResponse = {
            "code" : 404,
            "message" : "Runtime Exception cannot Post data",
            "data" : [],
            "status" : false
            "error" : responseError
        }

        response.writeHead(200,{"Content-Type":"application/json"})
        or
        response.writeHead(200,{"Content-Type":"application/json;Charset=utf-8"})
        response.write(JSON.stringify(JsonResponse));

2. response.write();


Generating Pretty JSON Response :-
***********************************
by default when you will be using express module.
you will get json() method, to print the output in pretty mode.
but we are not using "express" module hence, we need to use JSON.stringify() to print the output in pretty mode.

pretty mode in JSON.stringify() :-
***********************************
JSON.stringify({name:"prabhat",class:"Diploma"})

output :
    {name:"prabhat",class:"Diploma"}

pretty Output :-
you need to increase padding width or pretty width
JSON.stringify(object,null,Pwidth)
Pwidth = 1,2,..................n
standard : 4

JSON.stringify({name:"prabhat",class:"Diploma"},null,4)

Output :
{name:"prabhat",class:"Diploma"}
{
    name:"prabhat",
    class:"Diploma"
}


fs module